import Head from 'next/head'
import { useState } from 'react'

export default function Home() {
  const [data, setData] = useState({
    totalScore: 100,
    userScore: 0,
    distributions: [],
  })

  const [name, setName] = useState('')
  const [totalCount, setTotalCount] = useState('')
  const [totalPercentage, setTotalPercentage] = useState('')
  const [individuals, setIndividuals] = useState([
    {
      userMarks: '',
      totalMarks: '',
    },
  ])

  function handleNext(e) {
    e.preventDefault()

    let total = 0
    let user = 0
    for (let item of individuals) {
      total += Number(item.totalMarks)
      user += Number(item.userMarks)
    }
    let percen = (user / total) * 100
    let finalPercen = Number(totalPercentage) * (Number(percen) / 100)

    let tempData = {
      name: name,
      finalPercen: finalPercen,
    }
    setData({
      ...data,
      userScore: Number(data.userScore) + finalPercen,
      distributions: [...data.distributions, tempData],
    })
    setName('')
    setTotalCount('')
    setTotalPercentage('')
    setIndividuals([
      {
        userMarks: '',
        totalMarks: '',
      },
    ])
    console.log(data)
  }

  function handleInput(e, index = null) {
    if (e.target.name === 'name') {
      setName(e.target.value)
    } else if (e.target.name === 'count') {
      if (e.target.value > 15) {
        return
      }

      setTotalCount(e.target.value)

      if (!e.target.value) {
        setIndividuals([
          {
            userMarks: '',
            totalMarks: '',
          },
        ])
      }

      if (e.target.value > 1) {
        let tempArr = []
        for (let i = 0; i < e.target.value; i++) {
          tempArr.push({
            userMarks: '',
            totalMarks: '',
            name: i + 1,
          })
        }
        setIndividuals([...tempArr])
      }
    } else if (e.target.name === 'percentage') {
      setTotalPercentage(e.target.value)
    } else if (e.target.name === 'user-marks') {
      let tempArr = [...individuals]
      tempArr[index] = {
        ...tempArr[index],
        userMarks: e.target.value,
      }
      setIndividuals(tempArr)
    } else if (e.target.name === 'total-marks') {
      let tempArr = [...individuals]
      tempArr[index] = {
        ...tempArr[index],
        totalMarks: e.target.value,
      }
      setIndividuals(tempArr)
    }
  }

  return (
    <div>
      <Head>
        <title>Cheeseculator</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />

        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
        <link
          href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;700&display=swap"
          rel="stylesheet"
        />
      </Head>

      <main className="container px-4 mx-auto flex flex-col justify-center items-center gap-[30px] max-w-[500px] mt-8">
        <div className="flex gap-2">
          <h1 className="font-bold text-3xl text-center">
            <span className="text-orange-400">Cheese</span>culator üßÄÔ∏è
          </h1>
          <span className="text-sm">beta</span>
        </div>

        <h2 className="text-xl">
          Score:{' '}
          <span className="font-bold text-orange-400">
            {data.userScore.toFixed(2)}
          </span>
          /{data.totalScore}%
        </h2>

        <form
          className="flex flex-col gap-[20px] w-full"
          onSubmit={e => handleNext(e)}
        >
          <div className="flex flex-col w-full">
            <label htmlFor="name">
              Name{' '}
              <span className="text-xs text-gray-500">
                (e.x. Quiz, Attendance, etc.)
              </span>
            </label>
            <input
              id="name"
              name="name"
              type="text"
              value={name}
              required
              onChange={e => handleInput(e)}
            />
          </div>

          <div className="flex flex-col w-full">
            <label htmlFor="percentage">Total percentage</label>
            <input
              id="percentage"
              name="percentage"
              type="number"
              value={totalPercentage}
              required
              onChange={e => handleInput(e)}
            />
          </div>

          <div className="flex flex-col w-full">
            <label htmlFor="count">
              How many?{' '}
              <span className="text-xs text-gray-500">
                (e.x. 2 for total 2 quizzes and so on. Empty otherwise.)
              </span>
            </label>
            <input
              id="count"
              name="count"
              type="number"
              value={totalCount}
              onChange={e => handleInput(e)}
              min={1}
              max={15}
            />
          </div>

          <div className="flex flex-col gap-4 w-full">
            <div className="flex flex-col items-center gap-1 w-full">
              <h3 className="font-bold">Marks</h3>
            </div>

            <div className="flex flex-col gap-4 w-full">
              {individuals.map((item, index) => {
                return (
                  <div className="flex flex-col gap-1 w-full" key={index}>
                    {item.name ? (
                      <label htmlFor="">
                        {name} {item.name}
                      </label>
                    ) : null}

                    <div className="flex items-center gap-2 w-full">
                      <input
                        type="number"
                        placeholder="Your marks"
                        className="w-full"
                        required
                        min={0}
                        value={item.userMarks}
                        onChange={e => handleInput(e, index)}
                        name={'user-marks'}
                      />
                      <span>/</span>
                      <input
                        type="number"
                        placeholder="Total marks"
                        className="w-full"
                        required
                        min={0}
                        value={item.totalMarks}
                        onChange={e => handleInput(e, index)}
                        name={'total-marks'}
                      />
                    </div>
                  </div>
                )
              })}
            </div>
          </div>

          <button
            type="submit"
            className="border border-black px-4 py-1 bg-orange-400 text-white font-bold rounded w-max mx-auto mt-4 border-orange-400 shadow-md"
          >
            Next
          </button>
        </form>
      </main>
    </div>
  )
}
